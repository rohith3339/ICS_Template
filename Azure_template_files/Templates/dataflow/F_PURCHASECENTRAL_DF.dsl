source(output(
		AFNAM as string,
		BADAT as date,
		BANFN as string,
		BEDNR as string,
		BLCKD as string,
		BNFPO as integer,
		BSART as string,
		BSMNG as decimal(13,3),
		EBELN as string,
		EBELP as integer,
		EKGRP as string,
		EKORG as string,
		ERDAT as date,
		ERNAM as string,
		FRGKZ as string,
		FRGST as string,
		FRGZU as string,
		KNTTP as string,
		LFDAT as date,
		LGORT as string,
		LOAD_DATETIME as date,
		LOEKZ as string,
		MATKL as string,
		MATNR as string,
		MEINS as string,
		MENGE as decimal(13,3),
		PEINH as integer,
		PREIS as decimal(11,2),
		PRIO_URG as integer,
		PSTYP as string,
		RLWRT as decimal(15,2),
		STATU as string,
		TXZ01 as string,
		WAERS as string,
		WERKS as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> EBAN
source(output(
		AEDAT as date,
		ANGDT as date,
		BEDAT as date,
		BSART as string,
		BSTYP as string,
		BUKRS as string,
		DPAMT as decimal(11,2),
		DPDAT as date,
		DPPCT as decimal(5,2),
		DPTYP as string,
		EBELN as string,
		EKGRP as string,
		EKKO_POHDR_KEY as string,
		EKORG as string,
		ERNAM as string,
		FRGRL as string,
		INCO1 as string,
		INCO2 as string,
		KNUMV as string,
		LIFNR as string,
		WAERS as string,
		WKURS as decimal(9,5),
		ZBD1T as integer,
		ZTERM as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> EKKO
source(output(
		AEDAT as date,
		ANFNR as string,
		ANFPS as integer,
		BANFN as string,
		BEDNR as string,
		BNFPO as integer,
		BRTWR as decimal(13,2),
		BUKRS as string,
		EBELN as string,
		EBELP as integer,
		EKPO_POLN_KEY as string,
		ELIKZ as string,
		KNTTP as string,
		LEWED as date,
		LOEKZ as string,
		MATKL as string,
		MATNR as string,
		MEINS as string,
		MENGE as decimal(13,3),
		NETPR as decimal(11,2),
		NETWR as decimal(13,2),
		PEINH as integer,
		PRIO_URG as integer,
		PSTYP as string,
		STATU as string,
		TXZ01 as string,
		WERKS as string,
		LGORT as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> EKPO
source(output(
		BANFN as string,
		BNFPO as integer,
		EBELN as string,
		EBELP as integer,
		EINDT as date,
		EKET_SCHLN_KEY as string,
		SLFDT as date,
		LOAD_DATETIME as timestamp
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> EKET
source(output(
		ARKTX as string,
		LFIMG as decimal(13,3),
		MATKL as string,
		MATNR as string,
		NETWR as decimal(15,2),
		POSNR as integer,
		VBELN as string,
		VGBEL as string,
		VGPOS as integer
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> LIPSPROC
source(output(
		BWART as string,
		MBLNR as string,
		MJAHR as integer,
		VBELN_IM as string,
		VBELP_IM as integer,
		ZEILE as integer
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> MSEGPROC
source(output(
		BELNR as string,
		BEWTP as string,
		BLDAT as date,
		BUDAT as date,
		BUZEI as integer,
		BWART as string,
		DMBTR as decimal(15,3),
		EBELN as string,
		EBELP as integer,
		ERNAM as string,
		GJAHR as integer,
		MENGE as decimal(15,3),
		SHKZG as string,
		WAERS as string,
		WRBTR as decimal(15,3),
		LFBNR as string,
		LFGJA as string,
		LFPOS as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> EKBE
EKKO filter(BSTYP !='A') ~> GetPOs
GetPOs, EKPO join(EKKO@EBELN == EKPO@EBELN,
	joinType:'inner',
	broadcast: 'auto')~> JoinPODetails
JoinPODetails select(mapColumn(
		EBELN = EKKO@EBELN,
		EBELP,
		BANFN,
		BNFPO,
		BEDNR,
		EKGRP,
		EKORG,
		LGORT,
		MATKL,
		MATNR,
		WAERS,
		WERKS,
		LIFNR,
		BUKRS = EKKO@BUKRS,
		ANFNR,
		ANFPS
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectPODetails
EBAN select(mapColumn(
		BANFN,
		BEDNR,
		BNFPO,
		EBELN,
		EBELP,
		EKGRP,
		EKORG,
		LGORT,
		MATKL,
		MATNR,
		WAERS,
		WERKS
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectEBAN
FilterGETRFQs select(mapColumn(
		{PR No} = BANFN,
		{PR Ln} = BNFPO,
		{RFQ No} = EKET@EBELN,
		{RFQ Ln} = EBELP
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectRenameRFQPRComb
SelectEBAN, SelectRenameRFQPRComb join(BANFN == {PR No}
	&& BNFPO == {PR Ln},
	joinType:'left',
	broadcast: 'auto')~> EBANEKET
EBANEKET select(mapColumn(
		BANFN,
		BNFPO,
		EBELN,
		EBELP,
		BEDNR,
		EKGRP,
		EKORG,
		LGORT,
		MATKL,
		MATNR,
		WAERS,
		WERKS,
		{RFQ No},
		{RFQ Ln}
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectEBANEKET
FilterPOWithRFQ select(mapColumn(
		ANFNR,
		ANFPS,
		EBELN = EKPO@EBELN,
		EBELP
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectPORFQComb
SelectEBANEKET, SelectPORFQComb join({RFQ No} == ANFNR
	&& {RFQ Ln} == ANFPS,
	joinType:'left',
	broadcast: 'auto')~> JoinPRRFQPO
FilterPOs select(mapColumn(
		BANFN,
		BNFPO,
		EBELN = EKPO@EBELN,
		EBELP
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectPRPO
JoinPRRFQPO, SelectPRPO join(SelectEBANEKET@BANFN == SelectPRPO@BANFN
	&& SelectEBANEKET@BNFPO == SelectPRPO@BNFPO,
	joinType:'outer',
	broadcast: 'auto')~> JoinPRPO
JoinPRPO derive({PO No} = iifNull(SelectPORFQComb@EBELN, SelectPRPO@EBELN, SelectPORFQComb@EBELN),
		{PO Ln} = iifNull(SelectPORFQComb@EBELP,SelectPRPO@EBELP,SelectPORFQComb@EBELP)) ~> ChoosePONo
ChoosePONo select(mapColumn(
		{PR No} = SelectEBANEKET@BANFN,
		{PR Ln} = SelectEBANEKET@BNFPO,
		BEDNR,
		EKGRP,
		EKORG,
		LGORT,
		MATKL,
		MATNR,
		WAERS,
		WERKS,
		{RFQ No},
		{RFQ Ln},
		{PO No},
		{PO Ln}
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectFinalPORename
SelectFinalPORename, SelectPODetails join({PO No} == EBELN
	&& {PO Ln} == EBELP,
	joinType:'left',
	broadcast: 'auto')~> GetPODetails
GetPODetails derive(EKGRP_F = iifNull(SelectFinalPORename@EKGRP, SelectPODetails@EKGRP, SelectFinalPORename@EKGRP),
		EKORG_F = iifNull(SelectFinalPORename@EKORG, SelectPODetails@EKORG, SelectFinalPORename@EKORG),
		LGORT_F = iifNull(SelectFinalPORename@LGORT, SelectPODetails@LGORT, SelectFinalPORename@LGORT),
		MATKL_F = iifNull(SelectFinalPORename@MATKL, SelectPODetails@MATKL, SelectFinalPORename@MATKL),
		MATNR_F = iifNull(SelectFinalPORename@MATNR, SelectPODetails@MATNR, SelectFinalPORename@MATNR),
		WAERS_F = iifNull(SelectFinalPORename@WAERS, SelectPODetails@WAERS, SelectFinalPORename@WAERS),
		WERKS_F = iifNull(SelectFinalPORename@WERKS, SelectPODetails@WERKS, SelectFinalPORename@WERKS)) ~> ChooseDimFinalVals
ChooseDimFinalVals select(mapColumn(
		{PR No},
		{PR Ln},
		{RFQ No},
		{RFQ Ln},
		{PO No},
		{PO Ln},
		LIFNR,
		BUKRS,
		EKGRP_F,
		EKORG_F,
		LGORT_F,
		MATKL_F,
		MATNR_F,
		WAERS_F,
		WERKS_F
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectDimFinal
EKPO, EKKO join(EKPO@EBELN == EKKO@EBELN,
	joinType:'inner',
	broadcast: 'auto')~> GetPOJN
GetPOJN filter(BSTYP != 'A') ~> FilterPOs
GetPOJN filter(BSTYP=='A') ~> FilterPOWithRFQ
EKET, EKKO join(EKET@EBELN == EKKO@EBELN,
	joinType:'inner',
	broadcast: 'auto')~> GetEKETRFQs
GetEKETRFQs filter(BSTYP =='A') ~> FilterGETRFQs
LIPSPROC select(mapColumn(
		{Inbound Ln} = POSNR,
		{Inbound No} = VBELN,
		VGBEL,
		VGPOS
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectInbound
SelectDimFinal, SelectInbound join({PO No} == VGBEL
	&& {PO Ln} == VGPOS,
	joinType:'left',
	broadcast: 'auto')~> JoinInbound
MSEGPROC derive(MSEGGRKEY = concat(toString(MJAHR), MBLNR,toString(ZEILE))) ~> DerivedColumnMSEG
JoinInbound, DerivedColumnMSEG join({Inbound No} == VBELN_IM
	&& {Inbound Ln} == VBELP_IM,
	joinType:'left',
	broadcast: 'auto')~> JoinMSEGGRKEY
EKBE filter(BEWTP=="E") ~> Filter1
Filter1 derive(EKBEGRKEY = concat(toString(GJAHR), BELNR,toString(BUZEI))) ~> DerivedColumnEKBEGRKEY
JoinMSEGGRKEY, DerivedColumnEKBEGRKEY join({PO No} == EBELN
	&& {PO Ln} == EBELP,
	joinType:'left',
	broadcast: 'auto')~> JoinEKBEGRKEY
JoinEKBEGRKEY derive({GR Key} = iif(isNull(MSEGGRKEY), EKBEGRKEY, MSEGGRKEY)) ~> DerivedColumnGRKey
DerivedColumnGRKey select(mapColumn(
		{PR No},
		{PR Ln},
		{RFQ No},
		{RFQ Ln},
		{PO No},
		{PO Ln},
		{Vendor No} = LIFNR,
		{Company Code} = BUKRS,
		{Purchasing Group No} = EKGRP_F,
		EKORG_F,
		StoregeLocationKey = LGORT_F,
		{Material Group No} = MATKL_F,
		{Material No} = MATNR_F,
		{Currency Code} = WAERS_F,
		{Plant No} = WERKS_F,
		{Inbound Ln},
		{Inbound No},
		{GR Key},
		LFBNR
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectRequiredColumns
SelectRequiredColumns derive({PO CKey} = iifNull(ltrim(concat({PO No},toString({PO Ln})),"0"),"-1",ltrim(concat({PO No},toString({PO Ln})),"0")),
		{PR CKey} = iifNull(ltrim(concat({PR No},toString({PR Ln})),"0"),"-1",ltrim(concat({PR No},toString({PR Ln})),"0")),
		{Inbound CKey} = iifNull(ltrim(concat({Inbound No},toString({Inbound Ln})),"0"),"-1",ltrim(concat({Inbound No},toString({Inbound Ln})),"0")),
		{RFQ CKey} = iifNull(ltrim(concat({RFQ No},toString({RFQ Ln})),"0"),"-1",ltrim(concat({RFQ No},toString({RFQ Ln})),"0")),
		{Vendor CKey} = iifNull(ltrim({Vendor No},"0"),"-1",ltrim({Vendor No},"0")),
		{Company CKey} = iifNull(ltrim({Company Code},"0"),"-1",ltrim({Company Code},"0")),
		{Purchasing CKey} = iifNull(ltrim({Purchasing Group No},"0"),"-1",ltrim({Purchasing Group No},"0")),
		{StoregeLocation CKey} = iifNull(ltrim(StoregeLocationKey,"0"),"-1",ltrim(StoregeLocationKey,"0")),
		{Material Group CKey} = iifNull(ltrim({Material Group No},"0"),"-1",ltrim({Material Group No},"0")),
		{Material CKey} = iifNull(ltrim({Material No},"0"),"-1",ltrim({Material No},"0")),
		{Currency CKey} = iifNull(ltrim({Currency Code},"0"),"-1",ltrim({Currency Code},"0")),
		{Plant CKey} = iifNull(ltrim({Plant No},"0"),"-1",ltrim({Plant No},"0")),
		{GR CKey} = iifNull(ltrim({GR Key},"0"),"-1",ltrim({GR Key},"0")),
		{SES CKey} = iifNull(ltrim(LFBNR,"0"),"-1",ltrim(LFBNR,"0")),
		{Purchasing Org CKey} = iifNull(ltrim(EKORG_F,"0"),"-1",ltrim(EKORG_F,"0"))) ~> GenerateCKeys
GenerateCKeys select(mapColumn(
		{Vendor CKey},
		{Company CKey},
		{Purchasing Group CKey} = {Purchasing CKey},
		{Purchasing Org CKey},
		{StoregeLocation CKey},
		{Material Group CKey},
		{Material CKey},
		{Currency CKey},
		{Plant CKey},
		{GR CKey},
		{PR CKey},
		{PO CKey},
		{Inbound CKey},
		{RFQ CKey},
		{SES CKey}
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> SelectFinalColumns
SelectFinalColumns sink(allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	recreate:true,
	format: 'table',
	batchSize: 5000,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError') ~> FPurchaseCentralSink