source(output(
		AFNAM as string,
		BADAT as date,
		BANFN as string,
		BEDNR as string,
		BLCKD as string,
		BNFPO as integer,
		BSART as string,
		BSMNG as decimal(13,3),
		EBELN as string,
		EBELP as integer,
		EKGRP as string,
		EKORG as string,
		ERDAT as date,
		ERNAM as string,
		FRGKZ as string,
		FRGST as string,
		FRGZU as string,
		KNTTP as string,
		LFDAT as date,
		LGORT as string,
		LOAD_DATETIME as date,
		LOEKZ as string,
		MATKL as string,
		MATNR as string,
		MEINS as string,
		MENGE as decimal(13,3),
		PEINH as integer,
		PREIS as decimal(11,2),
		PRIO_URG as integer,
		PSTYP as string,
		RLWRT as decimal(15,2),
		STATU as string,
		TXZ01 as string,
		WAERS as string,
		WERKS as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> EBAN
source(output(
		{PR No} as string,
		{PR Ln} as string,
		{PR Release Date} as date
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	batchSize: 5000,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table') ~> IPRRELEASEDATE
EBAN select(mapColumn(
		AFNAM,
		BADAT,
		BANFN,
		BEDNR,
		BLCKD,
		BNFPO,
		ERDAT,
		ERNAM,
		FRGKZ,
		FRGST,
		FRGZU,
		LFDAT,
		LOEKZ,
		MEINS,
		MENGE,
		PEINH,
		PREIS,
		PSTYP,
		RLWRT,
		STATU,
		TXZ01,
		WAERS
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> RequiredColumns
RequiredColumns derive(BANFN = ltrim(BANFN,'0'),
		STATU = iif(STATU=='N', 'Not edited', iif(STATU=='B', 'PO created', iif(STATU=='A', 'RFQ created', iif(STATU=='K', 'Contract created', iif(STATU=='L', 'Sch Agrmnt created', iif(STATU=='S', 'SES created', 'RFQ sent')))))),
		BLCKD = iif(BLCKD=='1', 'Blocked', 'Not Blocked'),
		LOEKZ = iif(LOEKZ=='X', 'Deleted', 'Active'),
		PSTYP = iif(PSTYP=='9' , 'Service' , 'Material'),
		BNFPO = toString(BNFPO, "####"),
		PREIS = toString(PREIS,"#####"),
		{PR CKey} = concat(ltrim(BANFN,'0'),toString(BNFPO, "####"))) ~> Transformations
Transformations, IPRRELEASEDATE join(BANFN == {PR No}
	&& BNFPO == {PR Ln},
	joinType:'left',
	broadcast: 'auto')~> PRRELEASEEBANJN
PRRELEASEEBANJN select(mapColumn(
		{PR Requested By} = AFNAM,
		{PR Requsition Date} = BADAT,
		{PR No} = BANFN,
		{PR Tracking No} = BEDNR,
		{PR Block Ind} = BLCKD,
		{PR Ln} = BNFPO,
		{PR Changed Date} = ERDAT,
		{PR Created By} = ERNAM,
		{PR Release Ind} = FRGKZ,
		{PR Release Strategy} = FRGST,
		{PR Release Status} = FRGZU,
		{PR Requested Delivery Date} = LFDAT,
		{PR Deletion Ind} = LOEKZ,
		{PR UOM} = MEINS,
		{PR Qty} = MENGE,
		{PR Price Unit} = PEINH,
		{PR Val Price} = PREIS,
		{PR Item Category} = PSTYP,
		{PR Total Val Rel} = RLWRT,
		{PR Processing Status} = STATU,
		{PR Desc} = TXZ01,
		{PR Doc Currency} = WAERS,
		{PR Release Date},
		{PR CKey}
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> OnlyRequiredColumns
OnlyRequiredColumns keyGenerate(output({PR SKey} as long),
	startAt: 1L) ~> SurrogateKey
SurrogateKey sink(allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	recreate:true,
	format: 'table',
	batchSize: 5000,
	postSQLs:['insert into [dbo].[F_PURCHASEREQUISITION]([PR CKey],[PR SKey]) values(\'-1\',-1)'],
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError') ~> FPRREQUISITIONS